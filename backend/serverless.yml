service:
  name: serverless-bookshelf-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeMOdules: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1KB

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BOOKS_TABLE: Books-${self:provider.stage}
    TITLE_INDEX: TitleIndex
    CREATED_AT_INDEX: CreatedAtIndex
    RATING_INDEX: RatingIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.TITLE_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.RATING_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}
    

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          cors: true

  CreateBook:
    handler: src/lambda/http/createBook.handler
    events:
      - http:
          method: post
          path: books
          cors: true
          request:
            schema:
              application/json: ${file(src/validation/models/create-book-model.json)}

  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: books/{bookId}
          cors: true
          request:
            schema:
              application/json: ${file(src/validation/models/update-book-model.json)}

  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    events:
      - http:
          method: delete
          path: books/{bookId}
          cors: true

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: books/{bookId}/attachment
          cors: true

resources:
  Resources:
    BooksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: rating
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TITLE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: title
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.RATING_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: rating
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKS_TABLE}